// This code is generated by GitHub Copilot

const org = "octodemo";
const repoSelect = document.getElementById(
    "repoSelect"
);
const fastestDevDiv = document.getElementById(
    "fastestDev"
);
const prTimeDiv = document.getElementById(
    "prTime"
);

// NOTE: Replace with your own GitHub token!
const GITHUB_TOKEN = "";

async function fetchRepos() {
    const url = `https://api.github.com/orgs/` +
        `${org}/repos?per_page=100`;
    const res = await fetch(url, {
        headers: {
            Authorization: `token ${GITHUB_TOKEN}`
        }
    });
    if (!res.ok) {
        alert("Failed to fetch repos!");
        return;
    }
    const repos = await res.json();
    repoSelect.innerHTML =
        `<option value="">Select Repo</option>`;
    repos.forEach(repo => {
        const opt = document.createElement("option");
        opt.value = repo.name;
        opt.textContent = repo.name;
        repoSelect.appendChild(opt);
    });
}

let prFreqChart = null;

repoSelect.addEventListener("change", async () => {
    const repo = repoSelect.value;
    if (!repo) {
        fastestDevDiv.textContent = "-";
        prTimeDiv.textContent = "-";
        if (prFreqChart) prFreqChart.destroy();
        return;
    }
    await showTopCommitter(repo);
    await showAvgPRCloseTime(repo);
    await showPRFrequency(repo);
});

async function showTopCommitter(repo) {
    const url = `https://api.github.com/repos/` +
        `${org}/${repo}/commits?per_page=100`;
    const res = await fetch(url, {
        headers: {
            Authorization: `token ${GITHUB_TOKEN}`
        }
    });
    if (!res.ok) {
        fastestDevDiv.textContent = "Error";
        return;
    }
    const commits = await res.json();
    const counts = {};
    commits.forEach(c => {
        const name = c.author?.login || "Unknown";
        counts[name] = (counts[name] || 0) + 1;
    });
    let topUser = "-";
    let maxCommits = 0;
    for (const user in counts) {
        if (counts[user] > maxCommits) {
            topUser = user;
            maxCommits = counts[user];
        }
    }
    fastestDevDiv.textContent = `${topUser} (${maxCommits})`;
}

async function showAvgPRCloseTime(repo) {
    const url = `https://api.github.com/repos/` +
        `${org}/${repo}/pulls?state=closed&per_page=50`;
    const res = await fetch(url, {
        headers: {
            Authorization: `token ${GITHUB_TOKEN}`
        }
    });
    if (!res.ok) {
        prTimeDiv.textContent = "Error";
        return;
    }
    const prs = await res.json();
    if (!prs.length) {
        prTimeDiv.textContent = "No PRs";
        return;
    }
    let total = 0;
    let count = 0;
    prs.forEach(pr => {
        if (pr.closed_at && pr.created_at) {
            const created = new Date(pr.created_at);
            const closed = new Date(pr.closed_at);
            const diff = (closed - created) / 3600000;
            total += diff;
            count++;
        }
    });
    if (count === 0) {
        prTimeDiv.textContent = "No PRs";
        return;
    }
    const avg = (total / count).toFixed(2);
    prTimeDiv.textContent = `${avg} hrs`;
}

async function showPRFrequency(repo) {
    const url = `https://api.github.com/repos/` +
        `${org}/${repo}/pulls?state=all&per_page=100`;
    const res = await fetch(url, {
        headers: {
            Authorization: `token ${GITHUB_TOKEN}`
        }
    });
    if (!res.ok) {
        if (prFreqChart) prFreqChart.destroy();
        return;
    }
    const prs = await res.json();
    // Group PRs by creation date (YYYY-MM-DD)
    const freq = {};
    prs.forEach(pr => {
        const date = pr.created_at.slice(0, 10);
        freq[date] = (freq[date] || 0) + 1;
    });
    // Sort dates
    const dates = Object.keys(freq).sort();
    const counts = dates.map(d => freq[d]);
    // Draw chart
    const ctx = document.getElementById(
        "prFreqChart"
    ).getContext("2d");
    if (prFreqChart) prFreqChart.destroy();
    prFreqChart = new Chart(ctx, {
        type: "bar",
        data: {
            labels: dates,
            datasets: [{
                label: "PRs Created",
                data: counts,
                backgroundColor: "#43e97b",
                borderColor: "#0366d6",
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                x: { 
                    title: { display: true, text: "Date" }
                },
                y: { 
                    title: { display: true, text: "PRs" },
                    beginAtZero: true
                }
            }
        }
    });
}

window.onload = () => {
    fetchRepos();
};
